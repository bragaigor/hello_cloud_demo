package io.clouddemo.storage.rest;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.cloudant.client.api.CloudantClient;
import com.cloudant.client.api.Database;
import com.cloudant.client.api.ClientBuilder;
import com.cloudant.client.org.lightcouch.NoDocumentException;

import org.eclipse.microprofile.config.inject.ConfigProperty;

import java.net.MalformedURLException;
import java.net.URL;

@Path("database")
@ApplicationScoped
public class DatabaseResource {
	/***************************************************************************************************************/
	/************************************************ DATABASE CODE ************************************************/
	/***************************************************************************************************************/

	/* Cloudant API Key */
	@Inject
	@ConfigProperty(name = "cloudantapikey")
	private String cloudantapikey;

	/* Cloudant Endpoint URL */
	@Inject
	@ConfigProperty(name = "cloudantendpoint")
	private String databaseEndpoint;

	/* Cloudant Database Name */
	@Inject
	@ConfigProperty(name = "cloudantdbname")
	private String cloudantdbname;

	protected Database connectToDatabase() {
		URL databaseURL = null;
		try {
			databaseURL = new URL(databaseEndpoint);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}

		// Connect to Cloudant account
		CloudantClient cloudantClient = ClientBuilder.url(databaseURL)
			 .iamApiKey(this.cloudantapikey)
			 .disableSSLAuthentication()
			 .build();

		// Connect to database - false means don't create the database if it doesn't already exist
		Database db = cloudantClient.database(cloudantdbname, false);

		return db;
	}

	/***************************************************************************************************************/
	/************************************************* REST APIS ***************************************************/
	/***************************************************************************************************************/

	/**
	 * Retrieve a contact from the database using their first and last name.
	 *
	 * @param firstName The contact's first name.
	 * @param lastName The contact's last name.
	 * @return The stored JSON with the contact's info.
	 */
	@GET
    @Path("retrieve")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getContactFromDatabase(
		@QueryParam("first_name") final String firstName,
		@QueryParam("last_name") final String lastName
	) {
		String documentId = firstName + lastName;

        try {
			Database db = connectToDatabase();

			/* Look for the contact in the database, throws NoDocumentException if not found */
			ContactDocument document = db.find(ContactDocument.class, documentId);
			return Response.status(Response.Status.OK).entity(document.toJson()).build();
        } catch (NoDocumentException e) {
            e.printStackTrace();
        }

        return Response.status(Response.Status.NOT_FOUND).entity("Document " + documentId + " not found").build();
	}

	/**
	 * Store data in the form of a ContactDocument to the database.
	 *
	 * @param document JSON data document to store to the database, provided in the body of the POST request.
	 * @return The stored JSON or an error message.
	 */
	@POST
	@Path("store")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response addContactToDatabase(ContactDocument document) {
		if (!document.isEmpty()) {
			Database db = connectToDatabase();

			/* Overides _id generated by Cloudant (this is a non-partitioned database) */
			document.setFirstLastNameAsId();

			/* Save the new contact to the database, get the error if it exists */
			String responseError = db.save(document).getError();

			if (responseError == null) {
				return Response.status(Response.Status.CREATED).entity(document.toJson()).build();
			} else {
				return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Failed storing contact").build();
			}
		}

		return Response.status(Response.Status.BAD_REQUEST).entity("Contact is missing information - both first and last names needed").build();
	}
}
